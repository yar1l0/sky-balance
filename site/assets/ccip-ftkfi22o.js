import{B as l,g as m,d as y,e as k,i as b,h as O,j as E,k as L,H as h,n as x}from"./index-CSbDQnF_.js";class M extends l{constructor({callbackSelector:r,cause:a,data:n,extraData:i,sender:d,urls:t}){var o;super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],(o=a.metaMessages)!=null&&o.length?"":[],"Offchain Gateway Call:",t&&["  Gateway URL(s):",...t.map(f=>`    ${m(f)}`)],`  Sender: ${d}`,`  Data: ${n}`,`  Callback selector: ${r}`,`  Extra data: ${i}`].flat(),name:"OffchainLookupError"})}}class R extends l{constructor({result:r,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${m(a)}`,`Response: ${y(r)}`],name:"OffchainLookupResponseMalformedError"})}}class S extends l{constructor({sender:r,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${r}`],name:"OffchainLookupSenderMismatchError"})}}const A="0x556f1830",$={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function C(c,{blockNumber:r,blockTag:a,data:n,to:i}){const{args:d}=k({data:n,abi:[$]}),[t,o,f,u,s]=d,{ccipRead:e}=c,g=e&&typeof(e==null?void 0:e.request)=="function"?e.request:T;try{if(!b(i,t))throw new S({sender:t,to:i});const p=await g({data:f,sender:t,urls:o}),{data:w}=await O(c,{blockNumber:r,blockTag:a,data:E([u,L([{type:"bytes"},{type:"bytes"}],[p,s])]),to:i});return w}catch(p){throw new M({callbackSelector:u,cause:p,data:n,extraData:s,sender:t,urls:o})}}async function T({data:c,sender:r,urls:a}){var i;let n=new Error("An unknown error occurred.");for(let d=0;d<a.length;d++){const t=a[d],o=t.includes("{data}")?"GET":"POST",f=o==="POST"?{data:c,sender:r}:void 0,u=o==="POST"?{"Content-Type":"application/json"}:{};try{const s=await fetch(t.replace("{sender}",r).replace("{data}",c),{body:JSON.stringify(f),headers:u,method:o});let e;if((i=s.headers.get("Content-Type"))!=null&&i.startsWith("application/json")?e=(await s.json()).data:e=await s.text(),!s.ok){n=new h({body:f,details:e!=null&&e.error?y(e.error):s.statusText,headers:s.headers,status:s.status,url:t});continue}if(!x(e)){n=new R({result:e,url:t});continue}return e}catch(s){n=new h({body:f,details:s.message,url:t})}}throw n}export{T as ccipRequest,C as offchainLookup,$ as offchainLookupAbiItem,A as offchainLookupSignature};
